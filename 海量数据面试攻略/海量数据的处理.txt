笔者在实际工作中，有幸接触到海量的数据处理问题，海量数据是指数据量过大，数据格式复杂，

数据中的随机情况多，不便于分类和处理的数据。对其进行处理是一项艰巨而复杂的任务，原因有以下几个方面：


1. 数据量过大。数据中什么情况都可能存在。如果说有10条数据，那么大不了每条去逐一检查，人为处 理；

如果有上百条数据，也可以考虑；如果数据上到千万级别，甚至过亿，那就不是手工能解决的了，必须通过工具

或者程序进行处理。而海量的数据中，什么情况 都可能存在，例如，数据中某处格式出了问题，尤其在程序处理时

，前面还能正常处理，突然到了某个地方问题出现了，程序终止了。

2. 软硬件要求高。系统资源占用率高。对海量的数据进行处理，除了好的方法，最重要的就是合理使用工具，合理

分配系统资源。一般情况，如果处理的数据超过TB级，小型机是要考虑的，普通的服务器如果有好的方法也可以考虑，

不过也必须加大CPU和内存。

3. 要求很高的处理方法和技巧。这也是本文的写作目的所在，好的处理方法是一位工程师长期工作经验的积累，

也是个人经验的总结。没有通用的处理方法，但有通用的原理和规则。


那么处理海量数据有哪些经验和技巧呢？我把我所知道的罗列一下，以供大家参考：

确定好的建模方法和处理方案。对海量数据的处理，明确切实可行的处理方法和流程最为关键。在建立处理模型时要充分考虑到

海量数据数据量大、数据格式复杂的特点，建立好的处理模型。好的处理模型应该是处理中最快的，能够便于扩展，

便于处理更大的数据量，便于实施等等。

选用优秀的数据库工具。 现在的数据库工具厂家比较多，处理海量数据对所使用的数据库工具要求比较高，

一般使用Oracle或者DB2，微软公司最近发布的SQL Server 2005性能也不错。另外在BI领域：数据库，数据仓库，

多维数据库，数据挖掘等相关工具也要进行选择，像好的ETL工具和好的OLAP工具都十分必要，

 例如Informatic、Eassbase等等。笔者在实际数据分析项目中，对每天6000万条的日志数据进行处理，
 
 使用SQL Server 2000需要花费6小时，而使用SQL Server 2005只需要花费3小时。

编写优良的程序代码。处理数据离不开优秀的程序代码，尤其在进行复杂数据处理时，必须使用程序。

好的程序代码对数据的处理至关重要，这不仅仅是数据处理准确度的问题，更是数据处理效率的问题。

良好的程序代码应该包含好的算法、好的处理流程、好的效率、好的异常处理机制等等。

对海量数据进行分区操作。 对海量数据进行分区操作十分必要，例如针对按年份存取的数据，我们可以按年进行分区，

不同的数据库有不同的分区方式，不过处理机制大体相同。例如SQL Server的数据库分区是将不同的数据存于不同的文件组下，

而不同的文件组存于不同的磁盘分区下，这样将数据分散开，减小磁盘I/O，减小了系统负荷， 而且还可以将日志、

索引存放于不同的分区下。

建立广泛的索引。对海量的数据处理，对大表 建立索引是必行的，建立索引要考虑到具体情况，例如针对大表的分组、

排序等字段，都要建立相应索引，一般还可以建立复合索引，对经常插入的表则建立索引时 要小心。

笔者在处理数据时，曾经在一个ETL流程中，当插入表时，首先删除索引，插入完毕，建立索引，并实施聚合操作，

聚合完成后，再次插入前还是删除索 引，所以索引要用到好的时机，索引的填充因子和聚集、非聚集索引都要考虑。

提高硬件条件，加大CPU和内存。 对海量数据数据处理，必须考虑硬件条件，使用高配置服务器的。硬件条件包括加大内存，

加入更多更强劲的CPU，加大硬盘空间等等。笔者在处理2TB数据 时，使用的是4个CPU，16GB内存，发现有时还会出现内存

不足现象，需要进行其它方面的优化，如果这时没有足够的硬件条件做支撑，是万万不行的。

建立缓存机制。当数据量增加时，一般的处理工具都要考虑到缓存问题。缓存大小设置的好坏也关系到数据处理的成败，例如，

笔者在处理2亿条数据聚合操作时，缓存设置为10万条/Buffer，这对于这个级别的数据量是可行的。

加大虚拟内存。 如果系统资源有限，内存提示不足，则可以靠增加虚拟内存来解决。笔者在实际项目中曾经遇到

针对18亿条的数据进行处理，内存为1GB，1个P4 2.4G的CPU，对这么大的数据量进行聚合操作是有问题的，

提示内存不足，后来采用了加大虚拟内存的方法来解决，在6块磁盘分区上分别建立了6个 4096M的磁盘分区，

用于虚拟内存，这样虚拟的内存则增加为4096*6 + 1024 = 25600 M，解决了数据处理中的内存不足问题。

分批处理。 海量数据处理难是因为数据量大，那么解决海量数据处理难的问题其中一个技巧是减少数据量。

可以对海量数据分批处理，处理后的数据再进行合并操作，这样逐个 击破，有利于小数据量的处理，不至于面对大数据量带来的问题。

但这种方法也要因时因势进行，如果不允许拆分数据，还需要另想办法。不过一般按天、月、年等 存储的数据，都可以采用先分后合的方法，对数据进行分开处理。
使用临时表和中间表。数据量增加时，处理中要考虑提前汇总。这样做的目的是化整为 零，大表变小表，分块处理完成后，再利用一定的规则进行合并，

处理过程中的临时表的使用和中间结果的保存都非常重要，对于超海量的数据，如果大表处理不 了，只能拆分为多个小表。如果处理过程中需要多步汇总操作，

可按汇总步骤一步步来，不要一条语句完成，一口气吃成一个胖子。

优化查询SQL语句。 在对海量数据进行查询处理过程中，查询的SQL语句的性能对查询效率的影响是非常大的，编写高效优良的SQL脚本和存储过程是数据库工作人员的职责，也是 检验数据库工作人员水平的一个标准，在对SQL语句的编写过程中，例如减少关联，少用或不用游标，设计好高效的数据库表结构等都十分必要。笔者在工作中试 着对1亿行的数据使用游标，运行3个小时没有出结果，这时一定要改用程序处理了。

使用文本格式进行处理。 对一般的数据处理可以使用数据库，如果对复杂的数据处理，必须借助程序，那么在程序操作数据库和程序操作文本之间选择，是一定要选择程序操作文本的。原因 为：程序操作文本速度快；对文本进行处理不容易出错；文本的存储不受限制等等。例如一般的海量的网络日志都是文本格式或者csv格式（文本格式），对它进 行处理牵扯到数据清洗，是要利用程序进行处理的，而不建议导入数据库再做清洗。

定制强大的清洗规则和出错处理机制。海量数据中存在着不一致性，极有可能出现某处的瑕疵。例如，同样的数据中的时间字段，有的可能为非标准的时间，出现的原因可能为应用程序的错误，系统的错误等等。在进行数据处理时，必须制定强大的数据清洗规则和出错处理机制。

建立视图或者物化视图。视图中的数据来源于基表，对海量数据的处理，可以将数据按一定的规则分散到各个基表中，查询或处理过程中可以基于视图进行，这样分散了磁盘I/O，正如10根绳子吊着一根柱子和一根绳子吊着一根柱子的区别。

避免使用32位服务器（极端情况）。目前的计算机很多都是32位的，那么编写的程序对内存的需要便受限制，而很多的海量数据处理是必须大量消耗内存的，这便要求更好性能的服务器，其中对位数的限制也十分重要。

考虑操作系统问题。海量数据处理过程中，除了对数据库、处理程序等要求比较高以外，对操作系统的要求也放到了重要的位置，一般是必须使用服务器的，而且对系统的安全性和稳定性等要求也比较高。尤其对操作系统自身的缓存机制、临时空间的处理等问题都需要综合考虑。

使用数据仓库和多维数据库存储。数据量加大是一定要考虑OLAP的，传统的报表可能5、6个小时出来结果，而基于Cube的查询可能只需要几分钟，因此处理海量数据的利器是OLAP多维分析，即建立数据仓库，建立多维数据集，基于多维数据集进行报表展现和数据挖掘等等。

使用采样数据，进行数据挖掘。 基于海量数据的数据挖掘正在逐步兴起，面对着超海量的数据，一般的挖掘软件或算法往往采用数据抽样的方式进行处理

，这样的误差不会很大，大大提高了处理效 率和处理的成功率。一般采样时要注意数据的完整性，防止过大的偏差。笔者曾经对1亿2千万行的表数据进行采样，

抽取出400万行，经测试软件测试处理的误 差仅为千分之五，客户可以接受。
还有一些方法，需要在不同的情况和场合下运用，例如使用代理键等操作，这样的好处是加快了聚合时间，因为对数值型的聚合比对字符型的聚合快得多。

类似的情况需要针对不同的需求进行处理。
海量数据是发展趋势，对数据分析和挖掘也越来越重要，从海量数据中提取有用信息重要而紧迫，这便要求处理要准确，精度要高，

而且处理时间要短，得到有价值信息要快，所以，对海量数据的研究很有前途，也很值得进行广泛深入的研究。